package models

import (
	"bufio"
	"fmt"
	"github.com/degupta/godao/utils"
	"html/template"
	"os"
	"os/exec"
	"strings"
)

type parseContext struct {
	ModelName      string
	LowerModelName string
	PackageName    string
	IdCols         Columns
	AllCols        Columns
	TableName      string
}

func GenerateFile(m interface{}, tableName, outDir string) (ret error) {

	defer func() {
		if p := recover(); p != nil {
			if v, ok := p.(error); ok {
				ret = v
			} else {
				ret = fmt.Errorf("%s", p)
			}
		}
	}()

	modelInfo, err := GetModelInfo(m, tableName, false)
	checkErr(err)

	modelName := modelInfo.Name()
	lowerName := strings.ToLower(string(modelName[0])) + string(modelName[1:])
	fileName := utils.ToSnake(lowerName)
	pkgName := string(outDir[strings.LastIndex(outDir, "/")+1:])
	filePath := outDir + "/" + fileName + "_dao.go"
	fmt.Println("Using package:", pkgName, "File Path: ", filePath)

	err = os.Remove(filePath)
	if !os.IsNotExist(err) {
		checkErr(err)
	}

	f, err := os.Create(filePath)
	checkErr(err)
	defer f.Close()

	w := bufio.NewWriter(f)

	tmpl, err := template.New("generate").Parse(golangFileTemplate)
	checkErr(err)
	err = tmpl.Execute(w, &parseContext{
		ModelName:      modelName,
		LowerModelName: lowerName,
		PackageName:    pkgName,
		IdCols:         modelInfo.pKey,
		AllCols:        modelInfo.Columns,
		TableName:      tableName,
	})
	checkErr(err)

	w.Flush()

	cmd := exec.Command("go", "fmt", "./"+pkgName+"/...")
	b, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println(fmt.Sprint(err) + ": " + string(b))
		return err
	}
	return nil
}

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

var golangFileTemplate = `
// AUTOGENERATED -- DO NOT MODIFY!!!

package {{.PackageName}}

import (
	"github.com/degupta/godao/models"
	"github.com/degupta/godao/datastore"
)

var (
	{{.LowerModelName}}ModelInfo *models.ModelInfo
)

func init() {
	var err error

	{{.LowerModelName}}ModelInfo, err = models.GetModelInfo({{.ModelName}}{{"{}"}}, "{{.TableName}}", true)
	if err != nil {
		panic(err)
	}

}

func New{{.ModelName}}() *{{.ModelName}} {
	return &{{.ModelName}}{}
}

func ({{.LowerModelName}} {{.ModelName}}) getId() []interface{} {
	return []interface{} {
		{{ range .IdCols -}}
			&{{$.LowerModelName}}.{{.GetFieldName}},
		{{ end -}}
	}
}

func ({{.LowerModelName}} {{.ModelName}}) getDest() []interface{} {
	return []interface{} {
		{{ range .AllCols -}}
			&{{$.LowerModelName}}.{{.GetFieldName}},
		{{ end -}}
	}
}


func Get{{.ModelName}}ById(tx datastore.TxWrapper, id string) (*{{.ModelName}}, error) {
	{{.LowerModelName}} := New{{.ModelName}}()
	err := models.GetByIdTx(tx, {{.LowerModelName}}ModelInfo, {{.LowerModelName}}.getId(), {{.LowerModelName}}.getDest()...)
	if err != nil {
		return nil, err
	} else {
		return {{.LowerModelName}}, nil
	}
}

func ({{.LowerModelName}} *{{.ModelName}}) UpdateTx(tx datastore.TxWrapper) error {
	return models.UpdateTx(tx, {{.LowerModelName}}ModelInfo, {{.LowerModelName}}.getDest()...)
}

func ({{.LowerModelName}} *{{.ModelName}}) SaveTx(tx datastore.TxWrapper) error {
	if {{.LowerModelName}}.Id == "" {
		return {{.LowerModelName}}.CreateTx(tx)
	} else {
		return {{.LowerModelName}}.UpdateTx(tx)
	}
}

func ({{.LowerModelName}} *{{.ModelName}}) CreateTx(tx datastore.TxWrapper) error {
	return models.CreateTx(tx, {{.LowerModelName}}ModelInfo, {{.LowerModelName}}.getId(), {{.LowerModelName}}.getDest()[{{ len .IdCols}}:]...)
}

func Delete{{.ModelName}}Tx(tx datastore.TxWrapper, {{.LowerModelName}}Id string) error {
	return models.DeleteTx(tx, {{.LowerModelName}}ModelInfo, &{{.LowerModelName}}Id)
}

`
